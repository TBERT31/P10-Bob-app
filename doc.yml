name: job name # nom de l'ensemble des actions à exécuter dans ce workflow
run-name: running name # Github affiche ce nom dans la liste des exécutions de workflow (onglet Actions)

on: # Définit les évènement déclencheur de ce workflow
  push: # Définit l'évènement push en tant que déclencheur
    branches: [main, develop, feat/*, fix/*] # définit les branches sur lesquelles l'évènement sera déclenché, dans le cas les branches 'main', 'develop' et les branches commançant par 'feat/' ou 'fix/'
  pull_request: # Définit l'évènement pull_request en tant que déclencheur
    branches: [main, develop, feat/*, fix/*]
    types: [opened, synchronize, reopened] # définit le type de pull request qui déclencheront l'évènement

jobs: # liste des jobs qui seront executés dans ce workflow
  tests-front-end: # nom du premier job
    runs-on: ubuntu-latest # Environnement dans lequel sera executé le job

    steps: # etapes à suivre pour ce job
      - name: Checkout Repository # nom de l'étape
        uses: actions/checkout@v4 # action qui sera executée et qui est fournie par Github Actions. '@v4' permet de spécifier la version de l'action à utiliser. Cette étape permet de récupérer le code du repository
        
      - name: Setup Node.js 20 # Cette étape permet de configurer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 # Permet de spécifier la version de node à configurer

      - name: Install dependencies # Cette étape permet d'installer les dépendances du projet
        working-directory: front # Permet de spécifier dans quel répertoire il faut se placer
        run: npm ci # ici nous n'utilisons pas d'action de Github Actions mais nous lançons une commande dans le terminal 

      - name: Run tests and generate code coverage report # Cette étape exécute les tests et génère le rapport de couverture du code.
        run: npm test -- --watch=false --browsers=ChromeHeadless --code-coverage # utilise le script 'test' du package.json et y ajoute les options permettant d'executer une seule fois les tests dans un navigateur chrome sans interface et avec la génération du rapport de couverture
        working-directory: front

      - name: Upload test report # cette étape permet de télécharger le rapport de test généré à l'étape précédente
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report # permet de donner un nom au fichier
          path: front/coverage/bobapp # permet de spéicifier le chemin où se trouve le fichier
    
  tests-back-end:
    runs-on: ubuntu-latest
    steps:
      # l'étape précédente est la même  

      - name: Set up Java #Cette étape permet de configurer Java 21 avec la distribution Temurin (distribution open-source de la JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven' # Github Actions cherchera un cache contenant les dépendances Maven du projet sinon il les téléchargera

      - name: Build with Maven # Execution d'une commande Maven pour construire le projet
        run: mvn -B package --file pom.xml # -B execute maven en mode match pour ne pas afficher les sorties détaillées et interrompre le build en cas d'erreur
        working-directory: ./back
        
      - name: Run tests and generate jacoco report # Cette étape execute les tests et rénère le rapport de couverture Jacoco
        run: mvn test jacoco:report
        working-directory: ./back

      # l'étape suivante est la même

  push_front:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      # l'étape précédente est la même      

      - name: Log in to Docker Hub # Cette étape permet de s'authentifier auprès de Docker Hub. 
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} #Le nom d'utilisateur et le mot de passe sont fournis à l'aide des secrets stockés dans GitHub.
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker # Cette étape permet de récupérer les informations du tag et du label notamment qui seront nécessaire à la construction et poussée de l'image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: sandravsn/gerez-un-projet-collaboratif-en-integrant-une-demarche-ci-cd

      - name: Build and push Docker image # Cette étape construit et pousse l'image Docker sur DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./front # spécifie le repertoire à utiliser pour la constrution de l'image
          file: ./front/Dockerfile # spécifie le chemin du Dockerfile
          push: true # Indique que l'image Docker construite soit être poussée sur Docker Hub
          tags: ${{ steps.meta.outputs.tags }}-front # Spéicifie le tag récupéré à l'étape précédente et à laquelle on ajoute l'information 'front'
          labels: ${{ steps.meta.outputs.labels }} # idem que précédemment pour le label