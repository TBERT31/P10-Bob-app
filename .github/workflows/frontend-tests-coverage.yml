name: Frontend tests and Karma report # Nom du Workflow affiché dans l'interface Github Actions

# Déclenche le workflow à chaque push ou pull request sur la branche main
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  
# Définit un job nommé Frontend-test qui s'exécute sur une machine Virtuelle Ubuntu (Version la plus récente)  
jobs:
  Frontend-test:
    runs-on: ubuntu-latest

    # Définit `front` comme répertoire de travail par défaut pour toutes les étapes du job.
    defaults:
      run:
        working-directory: front

    # Utilise une stratégie de matrice pour tester sur différentes versions de Node.js.
    strategy:
      matrix:
        node-version: [20.x] # Versions de Node.js à tester

    steps:
      - name: Checkout
        uses: actions/checkout@v4 # Utilise l'action checkout pour récupérer le code source du dépôt.

      - name: Use Node.js ${{matrix.node-version}}
        uses: actions/setup-node@v4 # Utilise l'action setup-node pour configurer Node.js
        with:
          node-version: ${{matrix.node-version}} # Utilise la version de Node.js définie dans la matrice

      - name: Run npm install 
        run: npm install # Installe les dépendances npm

      - name: Run npm test
        run: npm run test:prod # Exécute les tests sans watcher et en calculant la couverture
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4 # Utilise l'action upload-artifact pour télécharger les fichiers de rapport de couverture générés par Karma.
        if: success() || failure()
        with:
          name: karma-report
          path: front/coverage # Chemin vers les fichiers de rapport de couverture

      # Utilise l'action test-reporting pour créer un rapport de test dans GitHub
      - name: Test Report
        uses: phoenix-actions/test-reporting@v15
        if: success() || failure()
        with:
          name: Karma Tests
          path: front/coverage/**/*.xml
          reporter: mocha-json