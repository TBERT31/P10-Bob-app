name: SonarCloud code quality analysis
run-name: ${{ github.actor }} is running sonar for front and back üöÄ

# D√©clenche le workflow √† chaque push ou pull request sur les branches sp√©cifi√©es
on:
  push:
    branches: [main, develop, feat/*, fix/*]
  pull_request:
    branches: [main, develop, feat/*, fix/*]
    types: [opened, synchronize, reopened]

# D√©finition des jobs
jobs:
  backend:
    name: Sonar Cloud Back-End Scan # Nomme la s√©rie d'action pour le backend
    runs-on: ubuntu-latest # Utilise une machine virtuelle Ubuntu la plus r√©cent
    defaults:
      run:
        working-directory: ${{ github.workspace }}/back

    steps:
      - name: Checkout Back-End code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # D√©sactive les clones superficiels pour une meilleure analyse de la pertinence

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21        # Installe JDK 21
          distribution: 'temurin' # D'autres options de distribution sont possibles.
          architecture: x64       # Architecture 64 bits
          cache: "maven"          # Utilise le cache pour Maven

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache  # Chemin vers le cache de SonarCloud
          key: ${{ runner.os }}-sonar # Cl√© unique pour le cache SonarCloud
          restore-keys: ${{ runner.os }}-sonar # Cl√© de restauration pour le cache

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2 # Chemin vers le cache Maven
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }} # Cl√© unique bas√©e sur le hash du fichier pom.xml
          restore-keys: ${{ runner.os }}-m2 # Cl√© de restauration pour le cache Maven

      - name: Build with Maven
        run: mvn clean package # Ex√©cute les commandes Maven pour nettoyer et packager le projet

      - name: SonarCloud Back-End Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # N√©cessaire pour obtenir les informations de PR, si disponibles
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Jeton d'authentification pour SonarCloud

      - name: Upload SonarQube Report
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-report
          path: .scannerwork/report-task.txt
  
  frontend:
    name: Sonar Cloud Front-End Scan # Nomme la s√©rie d'action pour le frontend
    runs-on: ubuntu-latest # Utilise une machine virtuelle Ubuntu la plus r√©cent
    strategy:
      matrix:
        node-version: [20] # D√©finissez ici les versions de Node.js que vous souhaitez utiliser
    defaults:
      run:
        working-directory: ${{ github.workspace }}/front

    steps:
      - name: Checkout Front-End code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # D√©sactive les clones superficiels pour une meilleure analyse de la pertinence

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4 # Utilise l'action setup-node pour configurer Node.js
        with:
          node-version: ${{ matrix.node-version }} # Utilise la version de Node.js d√©finie dans la matrice

      - name: Install frontend dependencies
        run: npm ci 

      - name: Build and execute tests
        run: |
          npm run build --if-present
          npm run test:prod -- --code-coverage

      - name: SonarCloud Front-End Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: front # Sets the project to analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: echo "Setting up Front-End code quality analysis"
