name: Frontend Workflow # Nom du Workflow affich√© dans l'interface Github Actions
run-name: ${{ github.actor }} is running frontend workflows (Tests, Coverage, Docker, SonarCloud) üöÄ

# D√©clanche le workflow √† chaque push ou pull request sur les branches main, develop etc...
on:
  push:
      branches: [main, develop, feat/*, fix/*]
  pull_request:
      branches: [main, develop, feat/*, fix/*]
      types: [opened, synchronize, reopened]
  
# D√©finit un job nomm√© Frontend-test qui s'ex√©cute sur une machine Virtuelle Ubuntu (Version la plus r√©cente)  
jobs:
  Frontend-test:
    runs-on: ubuntu-latest

    # D√©finit `front` comme r√©pertoire de travail par d√©faut pour toutes les √©tapes du job.
    defaults:
      run:
        working-directory: front

    # Utilise une strat√©gie de matrice pour tester sur diff√©rentes versions de Node.js.
    strategy:
      matrix:
        node-version: [20.x] # Versions de Node.js √† tester

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Utilise l'action checkout pour r√©cup√©rer le code source du d√©p√¥t.
        with:
          fetch-depth: 0 # Les clones sont d√©sactiv√©s pour une meilleure pertinence de l'analyse.

      - name: Use Node.js ${{matrix.node-version}}
        uses: actions/setup-node@v4 # Utilise l'action setup-node pour configurer Node.js
        with:
          node-version: ${{matrix.node-version}} # Utilise la version de Node.js d√©finie dans la matrice

      - name: Install dependencies
        run: npm ci # Installe les d√©pendances npm (npm install marche aussi)

      - name: Run npm test
        run: npm run test:prod # Ex√©cute les tests sans watcher et en calculant la couverture

      - name: Build application
        run: npm run build # On v√©rifie que le projet se build correctement (compilation)
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4 # Utilise l'action upload-artifact pour t√©l√©charger les fichiers de rapport de couverture g√©n√©r√©s par Karma.
        if: success() || failure()
        with:
          name: karma-report
          path: front/coverage # Chemin vers les fichiers de rapport de couverture

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # √âtape de connexion √† Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      # √âtape pour changer de r√©pertoire vers le projet backend
      - name: Change directory to backend project root
        run: cd back
  
      # Configuration de Docker Buildx (outil pour la construction avanc√©e d'images Docker)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      # Configuration de Docker Buildx pour le frontend
      - name: Set up Docker Buildx for frontend
        uses: docker/setup-buildx-action@v3
  
      # Construction et push de l'image Docker pour le frontend
      - name: Build and push frontend Dockerfile
        uses: docker/build-push-action@v6
        with:
            context: ./front
            file: ./front/Dockerfile
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-frontend:latest